ext {
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  componentName = 'Interlok Transform/JQ'
  componentDesc = "Transform JSON using JQ style syntax"
  jacksonVersion = "2.16.1"
}


dependencies {
  // Dependency to platform/BOM
  api (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  api ("com.fasterxml.jackson.core:jackson-databind")
  api ("net.thisptr:jackson-jq:1.0.0-preview.20230409")
  api ("net.thisptr:jackson-jq-extra:1.0.0-preview.20230409")
  testImplementation ("com.jayway.jsonpath:json-path:2.8.0")
}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

javadoc {
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

artifacts {
  archives javadocJar
  archives examplesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.7.0+")
        properties.appendNode("tags", "json,jq")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "https://github.com/eiiches/jackson-jq")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-json/develop/interlok-jq/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-json")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), 'derby.log', delombokTargetDir
}

javadoc.dependsOn offlinePackageList
processTestResources.dependsOn copyUnitTestProperties
clean.dependsOn deleteGeneratedFiles
