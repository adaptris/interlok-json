import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

ext {
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  componentName = 'Interlok Transform/JWT'
  componentDesc = "Handling JWT in Interlok"
  bouncyCastleVersion = "1.78.1"
  jwtVersion = "0.12.5"
  jacksonVersion = "2.17.0"
  jsonOrgVersion = "20240303"
}

dependencies {
  api ("org.json:json:$jsonOrgVersion")

  api ("org.bouncycastle:bcprov-jdk18on:$bouncyCastleVersion")
  api ("org.bouncycastle:bcpg-jdk18on:$bouncyCastleVersion")

  api ("io.jsonwebtoken:jjwt-api:$jwtVersion")
  runtimeOnly ("io.jsonwebtoken:jjwt-impl:$jwtVersion")
  runtimeOnly ("io.jsonwebtoken:jjwt-jackson:$jwtVersion")
  // Dependency to platform/BOM
  runtimeOnly (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  runtimeOnly ("com.fasterxml.jackson.core:jackson-databind")

  testImplementation ("org.skyscreamer:jsonassert:1.5.1")
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), 'derby.log', delombokTargetDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}


artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.11.0+")
        properties.appendNode("tags", "json,jwt")
        properties.appendNode("license", "false")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-json/develop/interlok-json-web-token/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-json")
        properties.appendNode("externalUrl", "https://github.com/jwtk/jjwt")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

delombok {
  target = delombokTargetDir
}

processTestResources.dependsOn copyUnitTestProperties
clean.dependsOn deleteGeneratedFiles
