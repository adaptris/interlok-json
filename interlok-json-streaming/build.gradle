ext {
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  componentName = 'Interlok Transform/JSON Streaming'
  componentDesc = "Streaming JSON in a STaX-alike manner"
  jacksonVersion = "2.16.2"
  jsonSurferVersion = "1.6.5"
}


dependencies {
  api project(':interlok-json')
  api ("com.adaptris:interlok-stax:$interlokCoreVersion") { changing= true}
  api ("de.odysseus.staxon:staxon:1.3")

  api("com.github.jsurfer:jsurfer-core:$jsonSurferVersion")
  api("com.github.jsurfer:jsurfer-gson:$jsonSurferVersion") {
    exclude group: "com.google.code.gson", module: "gson"
  }
  implementation ("com.google.code.gson:gson:2.10.1")
  api("com.github.jsurfer:jsurfer-jackson:$jsonSurferVersion") {
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
  }
  api("com.github.jsurfer:jsurfer-jsonsimple:$jsonSurferVersion") {
    exclude group: "junit", module: "junit"
  }

  // Dependency to platform/BOM
  implementation (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))  
  implementation ("com.fasterxml.jackson.core:jackson-databind")
  implementation ("com.fasterxml.jackson.core:jackson-core")
  implementation ("com.fasterxml.jackson.core:jackson-annotations")
  testImplementation("org.skyscreamer:jsonassert:1.5.1")
  testImplementation ("com.jayway.jsonpath:json-path:2.9.0")

}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}


delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), 'derby.log', delombokTargetDir
}


task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}


artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.2+")
        properties.appendNode("tags", "json")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "http://www.json.org/")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-json/develop/interlok-json-streaming/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-json")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}


javadoc.dependsOn offlinePackageList,umlJavadoc
processTestResources.dependsOn copyUnitTestProperties
clean.dependsOn deleteGeneratedFiles
