import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

ext {
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  componentName='Interlok/JSON'
  jacksonVersion='2.12.0'
  jsonOrgVersion = '20201115'
}


dependencies {
  compile ("net.sf.json-lib:json-lib:2.4:jdk15") {
    exclude group: 'xerces', module: 'xercesImpl'
  }
  compile ("xom:xom:1.3.5") {
    exclude group: 'xalan', module: 'xalan'
    exclude group: 'xerces', module: 'xercesImpl'
  }
  compile ("org.json:json:$jsonOrgVersion")
  compile ("com.jayway.jsonpath:json-path:2.4.0")
  compile ("com.bazaarvoice.jolt:jolt-core:0.1.1")
  compile ("com.bazaarvoice.jolt:json-utils:0.1.1")
  compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
  compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
  compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
  compile ("commons-collections:commons-collections:3.2.2")
  compile ("commons-beanutils:commons-beanutils:1.9.4")
  compile ("xerces:xercesImpl:2.12.1")

  compile ("com.github.everit-org.json-schema:org.everit.json.schema:1.12.0")
  compile ("com.google.guava:guava:30.1-jre")
  compile ("com.flipkart.zjsonpatch:zjsonpatch:0.4.11")
  testCompile ("org.skyscreamer:jsonassert:1.5.0")
  testCompile ("org.apache.derby:derby:10.14.2.0")
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}


task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), 'derby.log', delombokTargetDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

delombok {
  target = delombokTargetDir
}

artifacts {
  archives javadocJar
  archives examplesJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", "Everything JSON related; transformations, schemas, json-path (xpath-alike), splitting")
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/cookbook-json-transform.html")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.0+")
        properties.appendNode("tags", "json,transform,jdbc")
        properties.appendNode("license", "false")
        properties.appendNode("externalUrl", "http://www.json.org/")
        properties.appendNode("readme", "https://raw.githubusercontent.com/adaptris/interlok-json/develop/interlok-json/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-json")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

javadoc.dependsOn offlinePackageList,umlJavadoc
processTestResources.dependsOn copyUnitTestProperties
clean.dependsOn deleteGeneratedFiles
